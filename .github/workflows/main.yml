name: Main Workflow Run

on:
  push:
  release:
    types: [created]
  pull_request:
    types: [opened]
    branches:
      - main

jobs:
  prepare:
    name: Prepare Workflow
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        name: Download repo from GitHub
      - uses: pozetroninc/github-action-get-latest-release@master
        id: version
        if: github.event_name == 'release'
        name: Get latest version name from GitHub
        with:
          repository: scolastico-dev/s.Default # DONT FORGET TO REPLACE GITHUB REPO NAME HERE
          excludes: draft
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
            echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
            echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Set version in pom.xml
        uses: datamonsters/replace-action@v2
        if: github.event_name == 'release'
        with:
          files: pom.xml
          replacements: dev-snapshot=${{ steps.version.outputs.release }}
      - name: Set version in VERSION file
        uses: datamonsters/replace-action@v2
        if: github.event_name == 'release'
        with:
          files: src/main/resources/staticVars/VERSION
          replacements: dev-snapshot=${{ steps.version.outputs.release }}
      - name: Set version in pom.xml
        uses: datamonsters/replace-action@v2
        if: github.event_name != 'release'
        with:
          files: pom.xml
          replacements: dev-snapshot=dev-snapshot-${{ steps.vars.outputs.sha_short }}
      - name: Set version in VERSION file
        uses: datamonsters/replace-action@v2
        if: github.event_name != 'release'
        with:
          files: src/main/resources/staticVars/VERSION
          replacements: dev-snapshot=dev-snapshot-${{ steps.vars.outputs.sha_short }}
      - name: Set branch in BRANCH file
        uses: datamonsters/replace-action@v2
        with:
          files: src/main/resources/staticVars/BRANCH
          replacements: IN-DEV=${{ steps.vars.outputs.branch }}
      - name: Set commit hash in COMMIT file
        uses: datamonsters/replace-action@v2
        with:
          files: src/main/resources/staticVars/COMMIT
          replacements: IN-DEV=${{ steps.vars.outputs.sha_short }}
      - uses: actions/upload-artifact@v2
        name: Upload prepared repo to artifacts
        with:
          name: prepared-repo
          path: ${{ github.workspace }}
  test:
    name: Test
    runs-on: ubuntu-20.04
    needs: prepare
    steps:
      - uses: actions/download-artifact@v2
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Test with maven
        run: mvn -B test --file pom.xml
  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/download-artifact@v2
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Build with maven
        run: mvn -B clean install compile assembly:single --file pom.xml
      - uses: actions/upload-artifact@v2
        name: Upload builded jar to artifacts
        with:
          name: build
          path: ${{ github.workspace }}/target/example-jar-with-dependencies.jar # DONT FORGET TO REPLACE PROJECT NAME HERE
          retention-days: 1
  javadoc:
    name: Generate Javadoc
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/download-artifact@v2
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Generate javadocs with Mmven
        run: mvn -B javadoc:javadoc --file pom.xml
      - uses: actions/upload-artifact@v2
        name: Upload javadocs to artifacts
        with:
          name: javadocs
          path: ${{ github.workspace }}/target/site/apidocs
          retention-days: 1
  ci:
    name: Continuous Integration
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    needs: [build, javadoc]
    steps:
      - uses: actions/download-artifact@v2
        name: Download build
        with:
          name: build
      - uses: actions/download-artifact@v2
        name: Download javadocs
        with:
          name: javadocs
          path: javadocs/
      - name: Upload to Release
        uses: JasonEtco/upload-to-release@master
        with:
          args: example-jar-with-dependencies.jar application/java-archive # DONT FORGET TO REPLACE PROJECT NAME HERE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: peaceiris/actions-gh-pages@v3
        name: Update live javadocs
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: javadocs/
  cleanup:
    name: Cleanup
    runs-on: ubuntu-20.04
    continue-on-error: true
    if: always()
    needs: [prepare, test, build, javadoc, ci]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        name: Delete prepared repo artifact
        with:
          name: prepared-repo
