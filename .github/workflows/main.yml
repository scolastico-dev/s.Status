name: Main Workflow Run

on:
  push:
    branches: [main]
  release:
    types: [published]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Run setup script
        run: chmod +x $FILE && ./$FILE
        env:
          VERSION: ${{ github.event.release.tag_name }}
          FILE: .github/scripts/setup-repo.sh

      # Setup JDK
      - name: Set up JDK 12
        uses: actions/setup-java@v3
        with:
          java-version: 12
          cache: gradle
          distribution: adopt
      - name: Setting permissions
        run: chmod +x ./gradlew
      - name: Download dependencies
        run: ./gradlew dependencies --refresh-dependencies

      # Setup Node.js
      - name: Set up node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: website/pnpm-lock.yaml
      - name: Install node modules
        run: cd website && npm i -g pnpm && pnpm install

      # Build the website
      - name: Build website
        run: cd website && npm run build
      - name: Move website into resources
        run: rm -rf src/main/resources/web && mv website/dist src/main/resources/web

      # Build the App
      - name: Build app
        if: always()
        run: ./gradlew build -x detekt

      # Upload the .jar file
      - uses: actions/upload-artifact@v3
        name: Upload builded jar to artifacts
        with:
          name: build
          path: ${{ github.workspace }}/build/libs/${{ env.JAR_NAME }}
          retention-days: 1
  test:
    name: Test Application
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v3

      # Setup JDK
      - name: Set up JDK 12
        uses: actions/setup-java@v3
        with:
          java-version: 12
          cache: gradle
          distribution: adopt
      - name: Setting permissions
        run: chmod +x ./gradlew
      - name: Download dependencies
        run: ./gradlew dependencies --refresh-dependencies

      # Setup Node.js
      - name: Set up node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
          cache-dependency-path: website/pnpm-lock.yaml
      - name: Install node modules
        run: cd website && npm i -g pnpm && pnpm install

      # Run tests
      - name: Run eslint
        run: cd website && npm run lint
      - name: Test with gradle
        if: always()
        run: ./gradlew test
      - name: Perform detekt analysis
        if: always()
        run: ./gradlew detekt
  docs:
    name: Build Documentation
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Run setup script
        run: chmod +x $FILE && ./$FILE
        env:
          VERSION: ${{ github.event.release.tag_name }}
          FILE: .github/scripts/setup-repo.sh

      # Build mkdocs
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Setup MkDocs
        run: pip install mkdocs-material mkdocs-git-revision-date-localized-plugin
      - name: Generate Documentation
        run: mkdocs build --no-directory-urls -f ./docs/mkdocs.yml

      # Build javadoc
      - name: Set up JDK 12
        uses: actions/setup-java@v3
        with:
          java-version: 12
          cache: gradle
          distribution: adopt
      - name: Setting permissions
        run: chmod +x ./gradlew
      - name: Download dependencies
        run: ./gradlew dependencies --refresh-dependencies
      - name: Generate dokka html with gradle
        run: ./gradlew dokkaHtml
      - name: Generate dokka javadaoc with gradle
        run: ./gradlew dokkaJavadoc

      # Combine the documentation
      - name: Move javadoc files into documentation.
        run: mv build/dokka/javadoc docs/site/javadoc
      - name: Move dokka files into documentation.
        run: mv build/dokka/html docs/site/dokka

        # Upload the documentation
      - uses: actions/upload-artifact@v3
        name: Upload documentation to artifacts
        with:
          name: docs
          path: ${{ github.workspace }}/docs/site/
          retention-days: 1
  ci:
    name: Continuous integration
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    needs: [docs, test]
    steps:
      - uses: actions/checkout@v3
      - name: Read project-settings.env file.
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: repo/.github/actions.env

      # Download the artifacts
      - uses: actions/download-artifact@v2
        name: Download build
        with:
          name: build
      - uses: actions/download-artifact@v2
        name: Download dokka-docs
        with:
          name: docs
          path: docs/

      # Upload docs
      - uses: papeloto/action-zip@v1
        with:
          files: docs/
          dest: docs.zip
      - name: Upload docs to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: docs.zip
          asset_name: docs.zip
          tag: ${{ github.ref }}
          overwrite: true

      # Upload binaries
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.JAR_NAME }}
          asset_name: ${{ env.JAR_NAME }}
          tag: ${{ github.ref }}
          overwrite: true

      # Ci to pages or rsync
      - uses: peaceiris/actions-gh-pages@v3
        if: ${{ env.CI_DOCS_TO_GH_PAGES == 'yes' }}
        name: Update live documentation on GH pages
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/
      - name: Install SSH Key
        if: ${{ env.CI_DOCS_TO_SERVER == 'yes' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOST }}
      - name: Deploy with rsync
        if: ${{ env.CI_DOCS_TO_SERVER == 'yes' }}
        run: rsync -avz -e 'ssh -p ${{ secrets.SSH_PORT }}' ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DOCUMENTATION_REMOTE_HOST_PATH }}
