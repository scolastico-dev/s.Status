name: Main Workflow Run

on:
  push:
    branches: [main]
  release:
    types: [created]
  pull_request:
    types: [opened]
    branches: [main]
  schedule:
    - cron: '25 1 * * 4'

# Secrets which are needed for CI_DOCS:
#   SSH_HOST: An ip address.
#   SSH_PORT: The port for ssh. Default is 22.
#   SSH_USER: The username for the login.
#   SSH_PRIVATE_KEY: The private key for the login.
#   DOCUMENTATION_REMOTE_HOST_PATH: The path where to store the documentation.
#   SSH_KNOWN_HOST: To get the known host execute: ssh-keyscan -H <IP_ADRESS>

env:
  GENERATE_JAVADOC: false
  CI_JAVADOC: false
  CI_DOCS: true
  USERNAME: scolastico-dev
  REPO: s.Status
  JAR_NAME: s.Status-jar-with-dependencies.jar

jobs:
  prepare:
    name: Prepare Workflow
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        name: Download repo from GitHub
      - uses: pozetroninc/github-action-get-latest-release@master
        id: version
        if: github.event_name == 'release'
        name: Get latest version name from GitHub
        with:
          repository: ${{ env.USERNAME }}/${{ env.REPO }}
          excludes: draft
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Set version in pom.xml
        uses: datamonsters/replace-action@v2
        if: github.event_name == 'release'
        with:
          files: pom.xml
          replacements: dev-snapshot=${{ steps.version.outputs.release }}
      - name: Set version in VERSION file
        uses: datamonsters/replace-action@v2
        if: github.event_name == 'release'
        with:
          files: src/main/resources/staticVars/VERSION
          replacements: dev-snapshot=${{ steps.version.outputs.release }}
      - name: Set version in pom.xml
        uses: datamonsters/replace-action@v2
        if: github.event_name != 'release'
        with:
          files: pom.xml
          replacements: dev-snapshot=dev-snapshot-${{ steps.vars.outputs.sha_short }}
      - name: Set version in VERSION file
        uses: datamonsters/replace-action@v2
        if: github.event_name != 'release'
        with:
          files: src/main/resources/staticVars/VERSION
          replacements: dev-snapshot=dev-snapshot-${{ steps.vars.outputs.sha_short }}
      - name: Set branch in BRANCH file
        uses: datamonsters/replace-action@v2
        with:
          files: src/main/resources/staticVars/BRANCH
          replacements: IN-DEV=${{ steps.vars.outputs.branch }}
      - name: Set commit hash in COMMIT file
        uses: datamonsters/replace-action@v2
        with:
          files: src/main/resources/staticVars/COMMIT
          replacements: IN-DEV=${{ steps.vars.outputs.sha_short }}
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Download dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: mvn -B dependency:resolve --file pom.xml
      - name: Cache dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - uses: actions/upload-artifact@v2
        name: Upload prepared repo to artifacts
        with:
          name: prepared-repo
          path: ${{ github.workspace }}
  test:
    if: github.event_name != 'schedule'
    name: Test
    runs-on: ubuntu-20.04
    needs: prepare
    steps:
      - uses: actions/download-artifact@v2
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Test with maven
        run: mvn -B test --file pom.xml
  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: [test, analyze]
    steps:
      - uses: actions/download-artifact@v2
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Build with maven
        run: mvn -B clean install compile package
      - uses: actions/upload-artifact@v2
        name: Upload builded jar to artifacts
        with:
          name: build
          path: ${{ github.workspace }}/target/${{ env.JAR_NAME }}
          retention-days: 1
  javadoc:
    name: Generate Javadoc
    runs-on: ubuntu-20.04
    needs: [test, analyze]
    steps:
      - uses: actions/download-artifact@v2
        if: ${{ env.GENERATE_JAVADOC == 'true' }}
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Cache dependencies
        if: ${{ env.GENERATE_JAVADOC == 'true' }}
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 12
        if: ${{ env.GENERATE_JAVADOC == 'true' }}
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Generate javadocs with Mmven
        if: ${{ env.GENERATE_JAVADOC == 'true' }}
        run: mvn -B javadoc:javadoc --file pom.xml
      - uses: actions/upload-artifact@v2
        if: ${{ env.GENERATE_JAVADOC == 'true' }}
        name: Upload javadocs to artifacts
        with:
          name: javadocs
          path: ${{ github.workspace }}/target/site/apidocs
          retention-days: 1
  ci:
    name: Continuous integration
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    needs: [build, javadoc]
    steps:
      - uses: actions/download-artifact@v2
        name: Download build
        with:
          name: build
      - uses: actions/download-artifact@v2
        if: ${{ env.GENERATE_JAVADOC == 'true' }} && ${{ env.CI_JAVADOC == 'true' }}
        name: Download javadocs
        with:
          name: javadocs
          path: javadocs/
      - name: Upload to Release
        uses: JasonEtco/upload-to-release@master
        with:
          args: ${{ env.JAR_NAME }} application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: peaceiris/actions-gh-pages@v3
        if: ${{ env.GENERATE_JAVADOC == 'true' }} && ${{ env.CI_JAVADOC == 'true' }}
        name: Update live javadocs
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: javadocs/
  cleanup:
    name: Cleanup
    runs-on: ubuntu-20.04
    continue-on-error: true
    if: always()
    needs: [prepare, test, build, javadoc, ci, analyze]
    steps:
      - uses: geekyeggo/delete-artifact@v1
        name: Delete prepared repo artifact
        with:
          name: prepared-repo
  build-docs:
    if: github.event_name != 'schedule'
    name: Generate documentation
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Setup sphinx
        run: pip install sphinx
      - name: Setup furo
        run: pip install furo
      - name: Setup sphinx-multiversion
        run: pip install sphinx-multiversion
      - name: Generate Documentation
        run: sphinx-multiversion docs build
      - uses: actions/upload-artifact@v2
        name: Upload builded files to artifacts
        with:
          name: builded-docs
          path: build
          retention-days: 1
  ci-docs:
    if: github.event_name != 'schedule'
    name: Continuous integration of documentation
    runs-on: ubuntu-20.04
    needs: build-docs
    steps:
      - uses: actions/download-artifact@v2
        if: ${{ env.CI_DOCS == 'true' }}
        name: Download builded documentation
        with:
          name: builded-docs
      - name: Install SSH Key
        if: ${{ env.CI_DOCS == 'true' }}
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOST }}
      - name: Deploy with rsync
        if: ${{ env.CI_DOCS == 'true' }}
        run: rsync -avz -e 'ssh -p ${{ secrets.SSH_PORT }}' ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DOCUMENTATION_REMOTE_HOST_PATH }}
  analyze:
    name: CodeQL Analyze
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['java', 'javascript']
    steps:
      - uses: actions/download-artifact@v2
        name: Download prepared repository
        with:
          name: prepared-repo
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      - name: Set up JDK 12
        uses: actions/setup-java@v1
        with:
          java-version: 12
          server-id: github
          settings-path: ${{ github.workspace }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: 'java'
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
